C51 COMPILER V9.56.0.0   PWM                                                               06/06/2017 16:06:11 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Objects\pwm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pwm.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\pwm.l
                    -st) TABS(2) OBJECT(.\Objects\pwm.obj)

line level    source

   1          #include "pwm.h"
   2          
   3          // Global variables
   4          unsigned char PWM_1 = 0;    // It can have a value from 0 (0% duty cycle) to 255 (100% duty cycle)
   5          unsigned char PWM_2 = 0;    // It can have a value from 0 (0% duty cycle) to 255 (100% duty cycle)
   6          unsigned int temp_1 = 0;    // Used inside Timer0 ISR
   7          unsigned int temp_2 = 0;    // Used inside Timer0 ISR
   8          
   9          unsigned char PWM_1_SENTIDO = SENTIDO_FRENTE;
  10          unsigned char PWM_2_SENTIDO = SENTIDO_FRENTE;
  11          
  12          // Init CCT function
  13          void cct_init(void)
  14          {
  15   1        P0 = 0x00;  
  16   1        P2 = 0x00;   
  17   1        P3 = 0x00;  
  18   1      
  19   1        return;
  20   1      }
  21          
  22          // Timer0 initialize
  23          void InitTimer(void)
  24          {
  25   1        TMOD |= 0x11;    // Set timer0 in mode 1 = 16bit mode
  26   1      
  27   1        TH0 = 0x00;      // First time value
  28   1        TL0 = 0x00;      // Set arbitrarily zero
  29   1      
  30   1        TH1 = 0x00;      // First time value
  31   1        TL1 = 0x00;      // Set arbitrarily zero
  32   1      
  33   1        ET0 = 1;         // Enable Timer0 interrupts
  34   1        ET1 = 1;
  35   1        EA  = 1;         // Global interrupt enable
  36   1      
  37   1        TR1 = 1;
  38   1        TR0 = 1;         // Start Timer 0
  39   1        
  40   1        return;
  41   1      }
  42          
  43          // PWM initialize
  44          void InitPWM(void)
  45          {
  46   1        PWM_1 = 0;         // Initialize with 0% duty cycle
  47   1        PWM_2 = 0;         // Initialize with 0% duty cycle
  48   1        
  49   1        InitTimer();    // Initialize timer0 to start generating interrupts
  50   1                 // PWM generation code is written inside the Timer0 ISR
  51   1        
  52   1        return;
  53   1      }
  54          
C51 COMPILER V9.56.0.0   PWM                                                               06/06/2017 16:06:11 PAGE 2   

  55          // Timer0 ISR
  56          void Timer0_ISR (void) interrupt 1   
  57          {
  58   1        TR0 = 0;    // Stop Timer 0
  59   1        
  60   1        if(PWM_1_Pin) // if PWM_Pin is high
  61   1        {
  62   2          if(PWM_1 != 0)
  63   2          {
  64   3            PWM_1_Pin = 0;
  65   3          }
  66   2          
  67   2          temp_1 = (255-PWM_1) * PWM_Freq_Num;
  68   2          TH0  = 0xFF - (temp_1>>8)&0xFF;
  69   2          TL0  = 0xFF - temp_1&0xFF;  
  70   2        }
  71   1        else       // if PWM_Pin is low
  72   1        {
  73   2          if(PWM_1 != 0)
  74   2          {
  75   3            PWM_1_Pin = 1;
  76   3          }
  77   2          
  78   2          temp_1 = PWM_1 * PWM_Freq_Num;
  79   2          TH0  = 0xFF - (temp_1>>8)&0xFF;
  80   2          TL0  = 0xFF - temp_1&0xFF;
  81   2        }
  82   1      
  83   1        TF0 = 0;     // Clear the interrupt flag
  84   1        TR0 = 1;     // Start Timer 0
  85   1        
  86   1        return;
  87   1      }
  88          
  89          // Timer1 ISR
  90          void Timer1_ISR (void) interrupt 3   
  91          {
  92   1        TR1 = 0;    // Stop Timer 0
  93   1      
  94   1        if(PWM_2_Pin) // if PWM_Pin is high
  95   1        {
  96   2          if(PWM_2 != 0)
  97   2          {
  98   3            PWM_2_Pin = 0;
  99   3          }
 100   2          
 101   2          temp_2 = (255 - PWM_2) * PWM_Freq_Num;
 102   2          TH1  = 0xFF - (temp_2 >> 8) & 0xFF;
 103   2          TL1  = 0xFF - temp_2 & 0xFF;  
 104   2        }
 105   1        else       // if PWM_Pin is low
 106   1        {
 107   2          if(PWM_2 != 0)
 108   2          {
 109   3            PWM_2_Pin = 1;
 110   3          }
 111   2          
 112   2          temp_2 = PWM_2 * PWM_Freq_Num;
 113   2          TH1  = 0xFF - (temp_2>>8)&0xFF;
 114   2          TL1  = 0xFF - temp_2&0xFF;
 115   2        }
 116   1      
C51 COMPILER V9.56.0.0   PWM                                                               06/06/2017 16:06:11 PAGE 3   

 117   1        TF1 = 0;     // Clear the interrupt flag
 118   1        TR1 = 1;     // Start Timer 0
 119   1        
 120   1        return;
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
