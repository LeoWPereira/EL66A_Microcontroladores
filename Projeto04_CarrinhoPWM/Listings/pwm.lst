C51 COMPILER V9.56.0.0   PWM                                                               06/01/2017 00:56:09 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Objects\pwm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pwm.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\pwm.l
                    -st) TABS(2) OBJECT(.\Objects\pwm.obj)

line level    source

   1          #include "pwm.h"
   2          
   3          // Global variables
   4          unsigned char PWM_1 = 0;    // It can have a value from 0 (0% duty cycle) to 255 (100% duty cycle)
   5          unsigned char PWM_2 = 0;    // It can have a value from 0 (0% duty cycle) to 255 (100% duty cycle)
   6          unsigned int temp_1 = 0;    // Used inside Timer0 ISR
   7          unsigned int temp_2 = 0;    // Used inside Timer0 ISR
   8          
   9          // Init CCT function
  10          void cct_init(void)
  11          {
  12   1        P0 = 0x00;  
  13   1        P2 = 0x00;   
  14   1        P3 = 0x00;  
  15   1      
  16   1        return;
  17   1      }
  18          
  19          // Timer0 initialize
  20          void InitTimer(void)
  21          {
  22   1        TMOD |= 0x11;    // Set timer0 in mode 1 = 16bit mode
  23   1      
  24   1        TH0 = 0x00;      // First time value
  25   1        TL0 = 0x00;      // Set arbitrarily zero
  26   1      
  27   1        TH1 = 0x00;      // First time value
  28   1        TL1 = 0x00;      // Set arbitrarily zero
  29   1      
  30   1        ET0 = 1;         // Enable Timer0 interrupts
  31   1        ET1 = 1;
  32   1        EA  = 1;         // Global interrupt enable
  33   1      
  34   1        TR1 = 1;
  35   1        TR0 = 1;         // Start Timer 0
  36   1        
  37   1        return;
  38   1      }
  39          
  40          // PWM initialize
  41          void InitPWM(void)
  42          {
  43   1        PWM_1 = 0;         // Initialize with 0% duty cycle
  44   1        PWM_2 = 0;         // Initialize with 0% duty cycle
  45   1        
  46   1        InitTimer();    // Initialize timer0 to start generating interrupts
  47   1                 // PWM generation code is written inside the Timer0 ISR
  48   1        
  49   1        return;
  50   1      }
  51          
  52          // Timer0 ISR
  53          void Timer0_ISR (void) interrupt 1   
  54          {
C51 COMPILER V9.56.0.0   PWM                                                               06/01/2017 00:56:09 PAGE 2   

  55   1        TR0 = 0;    // Stop Timer 0
  56   1        
  57   1        if(PWM_1_Pin) // if PWM_Pin is high
  58   1        {
  59   2          if(PWM_1 != 0)
  60   2          {
  61   3            PWM_1_Pin = 0;
  62   3          }
  63   2          
  64   2          temp_1 = (255-PWM_1) * PWM_Freq_Num;
  65   2          TH0  = 0xFF - (temp_1>>8)&0xFF;
  66   2          TL0  = 0xFF - temp_1&0xFF;  
  67   2        }
  68   1        else       // if PWM_Pin is low
  69   1        {
  70   2          if(PWM_1 != 0)
  71   2          {
  72   3            PWM_1_Pin = 1;
  73   3          }
  74   2          
  75   2          temp_1 = PWM_1 * PWM_Freq_Num;
  76   2          TH0  = 0xFF - (temp_1>>8)&0xFF;
  77   2          TL0  = 0xFF - temp_1&0xFF;
  78   2        }
  79   1      
  80   1        TF0 = 0;     // Clear the interrupt flag
  81   1        TR0 = 1;     // Start Timer 0
  82   1        
  83   1        return;
  84   1      }
  85          
  86          // Timer1 ISR
  87          void Timer1_ISR (void) interrupt 3   
  88          {
  89   1        TR1 = 0;    // Stop Timer 0
  90   1      
  91   1        if(PWM_2_Pin) // if PWM_Pin is high
  92   1        {
  93   2          if(PWM_2 != 0)
  94   2          {
  95   3            PWM_2_Pin = 0;
  96   3          }
  97   2          
  98   2          temp_2 = (255 - PWM_2) * PWM_Freq_Num;
  99   2          TH1  = 0xFF - (temp_2 >> 8) & 0xFF;
 100   2          TL1  = 0xFF - temp_2 & 0xFF;  
 101   2        }
 102   1        else       // if PWM_Pin is low
 103   1        {
 104   2          if(PWM_2 != 0)
 105   2          {
 106   3            PWM_2_Pin = 1;
 107   3          }
 108   2          
 109   2          temp_2 = PWM_2 * PWM_Freq_Num;
 110   2          TH1  = 0xFF - (temp_2>>8)&0xFF;
 111   2          TL1  = 0xFF - temp_2&0xFF;
 112   2        }
 113   1      
 114   1        TF1 = 0;     // Clear the interrupt flag
 115   1        TR1 = 1;     // Start Timer 0
 116   1        
C51 COMPILER V9.56.0.0   PWM                                                               06/01/2017 00:56:09 PAGE 3   

 117   1        return;
 118   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
